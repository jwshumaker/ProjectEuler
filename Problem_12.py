'''
Created on Apr 10, 2014

@author: JWShumaker

ProjectEuler.net
Problem ID 12
The sequence of triangle numbers is generated by adding the natural numbers. So the
 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms
 would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

SOLUTION:
For any number n, whose prime factorization is a^x*b^y*...*c^z=n, the number of
 factors is equal to (x+1)*(y+1)*...*(z+1).  Note, that the +1 accounts for an
 exponent of zero.
 
We will generate triangle numbers, find the exponents in each prime factorization
 and compute the resulting product of prime factor exponents.
'''

import math

# A list of prime numbers.
primes = []
    
    
# We can't use the Sieve of Eratosthenes, because we don't have an upper limit.
def FillPrimes(total):
    # We begin with the first prime number, 2.
    temp_prime = 2
    
    # Loop until we have a total number of primes.
    # If a number is not divisible by an already seen prime, then the given number
    #     is not composite and therefore must be prime itself.
    while(len(primes) < total):              
        is_prime = True
          
        # We check to see if our temp_prime was indeed prime.
        for p in primes:
            # If temp_prime is divisible by a previous prime, it must not be prime.
            if not temp_prime % p:
                is_prime = False
                break            
        
            if p > math.floor(math.sqrt(temp_prime)) + 1:
                break
        
        if is_prime:
            primes.append(temp_prime)
        
        temp_prime += 1

# Returns the next triangle number.
class TriangleNumber():
    def __init__(self):
        self.current = 1
        self.count = 1
        self.divisors = 1
        
    # Computes the next triangle number.
    def next(self):
        self.count += 1
        self.current += self.count
        return self.current
    
    
# A method to find the first triangle number with a given number of divisors.
def TriangleDivisors(divisors):
    # We always know 2 divisors, unless the number is 1.
    divisors_found = 1
    
    # First, we fill our primes list.  
    FillPrimes(6550)
    
    triangle_number = TriangleNumber()
    
    # Loop until we find a triangle_number with enough divisors.
    # Note that 1 is always a divisor.
    while(divisors_found < divisors):
        # Find the next triangle_number and reset our divisors_found counter.
        divisors_found = 1
        triangle_number.next()
        
        # Find the prime divisors of our current triangle number.
        for p in primes:
            # If p divides the triangle number, find it's exponent.
            if not triangle_number.current % p:
                p_exponent = 1
                while not (triangle_number.current % (p ** p_exponent)):   
                    p_exponent += 1 
                
                # Note that p_exponent is +1 to the prime number's exponent.
                # HOWEVER, 0 is a possible exponent when counting factors,
                #     so we don't adjust p_exponent when finding our answer.
                divisors_found *= p_exponent     
                
            if p > triangle_number.current:
                break        
                        
    return triangle_number.current



#Our method call.
print(TriangleDivisors(500))
